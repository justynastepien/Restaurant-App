{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class HttpService {\n  constructor(http) {\n    this.http = http;\n    // public getDish(userId: number): Observable<Dish>{\n    //     // const param = new HttpParams().set('userId', userId);\n    //     return this.http.get<Dish>(\"http://localhost:8080/dish\" + userId);\n    // }\n    this.getDish = userId => {\n      return this.http.get(\"http://localhost:8080/dish/\" + userId);\n    };\n  }\n  getDishes() {\n    return this.http.get(\"http://localhost:8080/dish\");\n  }\n  getUser(id) {\n    return this.http.get(\"http://localhost:8080/users/\" + id);\n  }\n  postUser(user) {\n    return this.http.post(\"http://localhost:8080/users/register\", user);\n  }\n  loggUser(logcred) {\n    return this.http.post(\"http://localhost:8080/login\", logcred);\n  }\n  postOrder(order) {\n    return this.http.post(\"http://localhost:8080/orders\", order);\n  }\n  getOrders(id) {\n    return this.http.get(\"http://localhost:8080/orders/\" + id);\n  }\n  deleteOrder(id) {\n    return this.http.delete(\"http://localhost:8080/orders/\" + id);\n  }\n  historicOrder(id, order) {\n    return this.http.put(\"http://localhost:8080/orders/\" + id, order);\n  }\n  getReviews(id) {\n    return this.http.get(\"http://localhost:8080/dish/\" + id + \"/review\");\n  }\n  sendReview(review) {\n    return this.http.post(\"http://localhost:8080/dish/review\", review);\n  }\n  logout(token) {\n    return this.http.delete(\"http://localhost:8080/logout/\" + token);\n  }\n  removeDish(id) {\n    return this.http.delete(\"http://localhost:8080/dish/\" + id);\n  }\n}\nHttpService.ɵfac = function HttpService_Factory(t) {\n  return new (t || HttpService)(i0.ɵɵinject(i1.HttpClient));\n};\nHttpService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: HttpService,\n  factory: HttpService.ɵfac\n});","map":{"version":3,"mappings":";;AAQA,OAAM,MAAOA,WAAW;EACpBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IASxB;IACA;IACA;IACA;IACO,YAAO,GAAIC,MAAc,IAAI;MAChC,OAAO,IAAI,CAACD,IAAI,CAACE,GAAG,CAAC,6BAA6B,GAAGD,MAAM,CAAC;IAC9D,CAAC;EAbH;EAEOE,SAAS;IAEZ,OAAO,IAAI,CAACH,IAAI,CAACE,GAAG,CAAc,4BAA4B,CAAC;EACnE;EAUOE,OAAO,CAACC,EAAU;IACrB,OAAO,IAAI,CAACL,IAAI,CAACE,GAAG,CAAO,8BAA8B,GAAEG,EAAE,CAAC;EAClE;EACOC,QAAQ,CAACC,IAAS;IACrB,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAO,sCAAsC,EAAED,IAAI,CAAC;EAC7E;EAEOE,QAAQ,CAACC,OAAwB;IACpC,OAAO,IAAI,CAACV,IAAI,CAACQ,IAAI,CAAS,6BAA6B,EAAEE,OAAO,CAAC;EAEzE;EAEOC,SAAS,CAACC,KAAW;IACxB,OAAO,IAAI,CAACZ,IAAI,CAACQ,IAAI,CAAQ,8BAA8B,EAAEI,KAAK,CAAC;EACvE;EAEOC,SAAS,CAACR,EAAU;IACvB,OAAO,IAAI,CAACL,IAAI,CAACE,GAAG,CAAe,+BAA+B,GAAGG,EAAE,CAAC;EAC5E;EAEOS,WAAW,CAACT,EAAU;IACzB,OAAO,IAAI,CAACL,IAAI,CAACe,MAAM,CAAC,+BAA+B,GAAGV,EAAE,CAAC;EACjE;EAEOW,aAAa,CAACX,EAAU,EAAEO,KAAY;IACzC,OAAO,IAAI,CAACZ,IAAI,CAACiB,GAAG,CAAQ,+BAA+B,GAAGZ,EAAE,EAAEO,KAAK,CAAC;EAC5E;EAEOM,UAAU,CAACb,EAAU;IACxB,OAAO,IAAI,CAACL,IAAI,CAACE,GAAG,CAAgB,6BAA6B,GAAGG,EAAE,GAAG,SAAS,CAAC;EACvF;EAEOc,UAAU,CAACC,MAAc;IAC5B,OAAO,IAAI,CAACpB,IAAI,CAACQ,IAAI,CAAS,mCAAmC,EAAEY,MAAM,CAAC;EAC9E;EAEOC,MAAM,CAACC,KAAY;IACtB,OAAO,IAAI,CAACtB,IAAI,CAACe,MAAM,CAAC,+BAA+B,GAAGO,KAAK,CAAC;EACpE;EAEOC,UAAU,CAAClB,EAAU;IACxB,OAAO,IAAI,CAACL,IAAI,CAACe,MAAM,CAAC,6BAA6B,GAAGV,EAAE,CAAC;EAC/D;;AA5DSP,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAA0B,SAAX1B,WAAW;AAAA","names":["HttpService","constructor","http","userId","get","getDishes","getUser","id","postUser","user","post","loggUser","logcred","postOrder","order","getOrders","deleteOrder","delete","historicOrder","put","getReviews","sendReview","review","logout","token","removeDish","factory"],"sourceRoot":"","sources":["C:\\Users\\Justyna\\Desktop\\PW\\Restaurant-App\\src\\app\\http.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Observable } from \"rxjs\";\r\nimport { Dish, Order, Review } from \"./app.component\";\r\nimport { User } from \"./app.component\";\r\nimport { LoginCredentails } from \"./app.component\";\r\nimport { HttpClient, HttpParams } from \"@angular/common/http\";\r\n\r\n@Injectable()\r\nexport class HttpService{\r\n    constructor(private http: HttpClient){\r\n\r\n    }\r\n\r\n    public getDishes():Observable<Array<Dish>>{\r\n \r\n        return this.http.get<Array<Dish>>(\"http://localhost:8080/dish\");\r\n    }\r\n\r\n    // public getDish(userId: number): Observable<Dish>{\r\n    //     // const param = new HttpParams().set('userId', userId);\r\n    //     return this.http.get<Dish>(\"http://localhost:8080/dish\" + userId);\r\n    // }\r\n    public getDish = (userId: number) => {\r\n        return this.http.get(\"http://localhost:8080/dish/\" + userId);\r\n      }\r\n\r\n    public getUser(id: number):Observable<User>{\r\n        return this.http.get<User>(\"http://localhost:8080/users/\"+ id);\r\n    }\r\n    public postUser(user:User):Observable<User>{\r\n        return this.http.post<User>(\"http://localhost:8080/users/register\", user);\r\n    }\r\n\r\n    public loggUser(logcred:LoginCredentails):Observable<String>{\r\n        return this.http.post<String>(\"http://localhost:8080/login\", logcred);\r\n        \r\n    }\r\n\r\n    public postOrder(order:Order):Observable<Order>{\r\n        return this.http.post<Order>(\"http://localhost:8080/orders\", order);\r\n    }\r\n\r\n    public getOrders(id: number):Observable<Array<Order>>{\r\n        return this.http.get<Array<Order>>(\"http://localhost:8080/orders/\" + id);\r\n    }\r\n\r\n    public deleteOrder(id: number){\r\n        return this.http.delete(\"http://localhost:8080/orders/\" + id);\r\n    }\r\n\r\n    public historicOrder(id: number, order: Order):Observable<Order>{\r\n        return this.http.put<Order>(\"http://localhost:8080/orders/\" + id, order);\r\n    }\r\n\r\n    public getReviews(id: number):Observable<Array<Review>>{\r\n        return this.http.get<Array<Review>>(\"http://localhost:8080/dish/\" + id + \"/review\");\r\n    }\r\n\r\n    public sendReview(review: Review):Observable<Review>{\r\n        return this.http.post<Review>(\"http://localhost:8080/dish/review\", review);\r\n    }\r\n\r\n    public logout(token:String){\r\n        return this.http.delete(\"http://localhost:8080/logout/\" + token);\r\n    }\r\n\r\n    public removeDish(id: number){\r\n        return this.http.delete(\"http://localhost:8080/dish/\" + id);\r\n    }\r\n\r\n    \r\n   \r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}